@page "/admin/login"
@inject HttpClient Http
@inject IJSRuntime JS
@inject NavigationManager Navigation

<link href="/css/login.css" rel="stylesheet" />

<div class="login-bg">
    <div class="login-card">

        <div class="login-header">
            <h3 class="fw-bold text-primary">Admin Login</h3>
            <p class="text-muted small">Please enter your credentials</p>
        </div>

        @if (!string.IsNullOrEmpty(error))
        {
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <strong>Oops!</strong> @error
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }

        <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="mb-3 input-with-icon">
                <i class="bi bi-person-fill form-icon"></i>
                <InputText class="form-control" @bind-Value="loginModel.Username" placeholder="Username" />
            </div>

            <div class="mb-3 input-with-icon">
                <i class="bi bi-lock-fill form-icon"></i>
                <InputText class="form-control" @bind-Value="loginModel.Password" placeholder="Password"
                           type="@(_showPassword ? "text" : "password")" />
                <i class="bi @( _showPassword ? "bi-eye-slash-fill" : "bi-eye-fill") show-hide"
                   @onclick="() => _showPassword = !_showPassword"></i>
            </div>

            <button class="btn btn-primary w-100" type="submit">Login</button>
        </EditForm>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? error;
    private bool _showPassword = false;

    private async Task HandleLogin()
    {
        error = null;
        try
        {
            var response = await Http.PostAsJsonAsync("api/auth/login", loginModel);
            if (!response.IsSuccessStatusCode)
            {
                error = "Invalid username or password.";
                return;
            }

            var json = await response.Content.ReadFromJsonAsync<LoginResponse>();
            await JS.InvokeVoidAsync("localStorage.setItem", "authToken", json!.Token);
            Navigation.NavigateTo("/admin/projects");
        }
        catch (Exception ex)
        {
            error = $"Login failed: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }


    public class LoginResponse
    {
        public string Token { get; set; } = string.Empty;
    }
}