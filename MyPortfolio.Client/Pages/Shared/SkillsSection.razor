@using MyPortfolio.Client.Services
@inject IJSRuntime JS
@inject LanguageService Lang

<link href="css/skills.css" rel="stylesheet" />

@if (_langReady)
{
    <div class="container-fluid skills-page">
        <div class="section-title text-center animate-fade-up delay-1">
            <h1 class="display-5 fw-bold">@Lang.T("skills", "title")</h1>
        </div>

        <div class="row gx-5 gy-4">
            <div class="col-lg-6 animate-fade-up delay-2">
                <h4 class="story-title">@Lang.T("skills", "story_title")</h4>
                <p class="story-text">
                    @Lang.T("skills", "story_text")
                </p>

                <dotlottie-player src="https://lottie.host/a67c8dfd-e3ca-45ac-bda8-cb344708de86/BgrrlWgU9l.lottie"
                                  background="transparent"
                                  speed="1"
                                  style="width: 200px; height: 200px"
                                  loop
                                  autoplay>
                </dotlottie-player>
            </div>

            <div class="col-lg-6 animate-fade-up delay-3">
                @foreach (var skill in SkillList)
                {
                    <div class="skill-bar">
                        <div class="label">
                            <span>@skill.Name</span>
                            <span>@skill.Level%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-fill" style="width: @($"{skill.Level}%")"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

@code {
    private bool _langReady = false;
    record Skill(string Name, int Level);
    record NavSection(string Title, string Link, string IconClass);

    protected override async Task OnInitializedAsync()
    {
        var culture = await JS.InvokeAsync<string>("localStorage.getItem", "lang") ?? "en-US";
        await Lang.LoadAsync(culture);
        _langReady = true;
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        Lang.OnLanguageChanged += HandleLanguageChanged;
    }

    private void HandleLanguageChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        Lang.OnLanguageChanged -= HandleLanguageChanged;
    }

    List<Skill> SkillList => new()
    {
        new("C#", 86),
        new("ASP.NET Core", 84),
        new("Entity Framework", 82),
        new("RESTful API", 80),
        new("SQL / PostgreSQL", 75),
        new("Azure DevOps", 70),
    };
}
